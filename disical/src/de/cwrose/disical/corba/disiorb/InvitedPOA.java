// **********************************************************************
//
// Generated by the ORBacus IDL to Java Translator
//
// Copyright (c) 2001
// IONA Technologies, Inc.
// Waltham, MA, USA
//
// All Rights Reserved
//
// **********************************************************************

// Version: 4.1.0

package de.cwrose.disical.corba.disiorb;

//
// IDL:de/cwrose/disical/corba/disiorb/Invited:1.0
//
public abstract class InvitedPOA
    extends org.omg.PortableServer.Servant
    implements org.omg.CORBA.portable.InvokeHandler,
               InvitedOperations
{
    static final String[] _ob_ids_ =
    {
        "IDL:de/cwrose/disical/corba/disiorb/Invited:1.0",
    };

    public Invited
    _this()
    {
        return InvitedHelper.narrow(super._this_object());
    }

    public Invited
    _this(org.omg.CORBA.ORB orb)
    {
        return InvitedHelper.narrow(super._this_object(orb));
    }

    public String[]
    _all_interfaces(org.omg.PortableServer.POA poa, byte[] objectId)
    {
        return _ob_ids_;
    }

    public org.omg.CORBA.portable.OutputStream
    _invoke(String opName,
            org.omg.CORBA.portable.InputStream in,
            org.omg.CORBA.portable.ResponseHandler handler)
    {
        final String[] _ob_names =
        {
            "accept",
            "destroy",
            "getInvitation",
            "getUser",
            "persist",
            "reject",
            "status"
        };

        int _ob_left = 0;
        int _ob_right = _ob_names.length;
        int _ob_index = -1;

        while(_ob_left < _ob_right)
        {
            int _ob_m = (_ob_left + _ob_right) / 2;
            int _ob_res = _ob_names[_ob_m].compareTo(opName);
            if(_ob_res == 0)
            {
                _ob_index = _ob_m;
                break;
            }
            else if(_ob_res > 0)
                _ob_right = _ob_m;
            else
                _ob_left = _ob_m + 1;
        }

        switch(_ob_index)
        {
        case 0: // accept
            return _OB_op_accept(in, handler);

        case 1: // destroy
            return _OB_op_destroy(in, handler);

        case 2: // getInvitation
            return _OB_op_getInvitation(in, handler);

        case 3: // getUser
            return _OB_op_getUser(in, handler);

        case 4: // persist
            return _OB_op_persist(in, handler);

        case 5: // reject
            return _OB_op_reject(in, handler);

        case 6: // status
            return _OB_op_status(in, handler);
        }

        throw new org.omg.CORBA.BAD_OPERATION();
    }

    private org.omg.CORBA.portable.OutputStream
    _OB_op_accept(org.omg.CORBA.portable.InputStream in,
                  org.omg.CORBA.portable.ResponseHandler handler)
    {
        org.omg.CORBA.portable.OutputStream out = null;
        try
        {
            accept();
            out = handler.createReply();
        }
        catch(jdoPersistenceEx _ob_ex)
        {
            out = handler.createExceptionReply();
            jdoPersistenceExHelper.write(out, _ob_ex);
        }
        return out;
    }

    private org.omg.CORBA.portable.OutputStream
    _OB_op_destroy(org.omg.CORBA.portable.InputStream in,
                   org.omg.CORBA.portable.ResponseHandler handler)
    {
        org.omg.CORBA.portable.OutputStream out = null;
        destroy();
        out = handler.createReply();
        return out;
    }

    private org.omg.CORBA.portable.OutputStream
    _OB_op_getInvitation(org.omg.CORBA.portable.InputStream in,
                         org.omg.CORBA.portable.ResponseHandler handler)
    {
        org.omg.CORBA.portable.OutputStream out = null;
        try
        {
            Invitation _ob_r = getInvitation();
            out = handler.createReply();
            InvitationHelper.write(out, _ob_r);
        }
        catch(jdoPersistenceEx _ob_ex)
        {
            out = handler.createExceptionReply();
            jdoPersistenceExHelper.write(out, _ob_ex);
        }
        return out;
    }

    private org.omg.CORBA.portable.OutputStream
    _OB_op_getUser(org.omg.CORBA.portable.InputStream in,
                   org.omg.CORBA.portable.ResponseHandler handler)
    {
        org.omg.CORBA.portable.OutputStream out = null;
        try
        {
            User _ob_r = getUser();
            out = handler.createReply();
            UserHelper.write(out, _ob_r);
        }
        catch(jdoPersistenceEx _ob_ex)
        {
            out = handler.createExceptionReply();
            jdoPersistenceExHelper.write(out, _ob_ex);
        }
        return out;
    }

    private org.omg.CORBA.portable.OutputStream
    _OB_op_persist(org.omg.CORBA.portable.InputStream in,
                   org.omg.CORBA.portable.ResponseHandler handler)
    {
        org.omg.CORBA.portable.OutputStream out = null;
        boolean _ob_r = persist();
        out = handler.createReply();
        out.write_boolean(_ob_r);
        return out;
    }

    private org.omg.CORBA.portable.OutputStream
    _OB_op_reject(org.omg.CORBA.portable.InputStream in,
                  org.omg.CORBA.portable.ResponseHandler handler)
    {
        org.omg.CORBA.portable.OutputStream out = null;
        try
        {
            reject();
            out = handler.createReply();
        }
        catch(jdoPersistenceEx _ob_ex)
        {
            out = handler.createExceptionReply();
            jdoPersistenceExHelper.write(out, _ob_ex);
        }
        return out;
    }

    private org.omg.CORBA.portable.OutputStream
    _OB_op_status(org.omg.CORBA.portable.InputStream in,
                  org.omg.CORBA.portable.ResponseHandler handler)
    {
        org.omg.CORBA.portable.OutputStream out = null;
        short _ob_r = status();
        out = handler.createReply();
        out.write_short(_ob_r);
        return out;
    }
}
