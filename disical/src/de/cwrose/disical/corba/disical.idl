/*
 * Titel: disical.idl
 *
 * Betroffene Module: corba
 * Verzapft von: deafman (Carsten Rose)
 */
module de {
	module cwrose {
		module disical {
			module corba {
				module disiorb {

//	typedef int dbkey;

/* Predefinitions */
 	interface User;
	interface Date;
	interface Invitation;

	typedef sequence <Date> seqDate;
	typedef sequence <Invitation> seqInvitation;
	typedef sequence <User> seqUser;

/* ServerInterface */
	interface Server {
		User createUser(in string login, 
				in string name, 
				in string pwd,
				in string email);
		
		User login(in string login, 
			in string pwd);
	};

/*	Userinterface */
	interface User {

		void setLogin(in string login);
		void setName(in string name);
		void setEmail(in string email);
		void setPasswd(in string passwd);

		string getLogin();
		string getName();
		string getEmail();
		string getPasswd();

		/* persist routine zum abgleich der db */
		boolean persist();

		void deleteUser();

		/* habe ich jetzt mal beim User hineingetan, denn der erzeugt die Dates
 		 * in einer fabrik
 		 */
		Date createDate(in long long start, 
				in long long end, 
				in string location, 
				in string subject);

		/* ok, the index might be of different type (typedef dbkey..) :-) */
		Date selectDate(in long index);

		seqDate listDatesByTime(in long long start,
									in long long end);

		seqDate listDatesByLocation(in string location);

		seqDate listDatesBySubject(in string subject);

		seqInvitation getInvitations();

		/* destroy the corba-object in the poa */
		void destroy();

	};



/* alle ersteinmal als string, kann noch verändert werden */
/* Dateinterface */
	interface Date {

		void setStartTime(in long long Time);
		void setEndTime(in long long Time);
		void setLocation(in string location);
		void setSubject(in string subject);
		void setLogin(in string login);
		/* habe ich modifiziert, um ein logischeres layout zu erhalten 
		 * (ergebnis ist der returnwert)
		 */
		long long getStartTime();
		long long getEndTime();
		string getLocation();
		string getSubject();
		string getLogin();

		/* nun nötig, um den index eines Dates zu erhalten */
		void setIndex(in long _index);
		long getIndex(); 

		/* persist routine zum abgleich der db */
		boolean persist();

		/* das delete bleibt hier :-) */
		void deleteDate();

		/* wir wollen ja schließlich die Dates auch modifizieren */
		void changeDate(in long long start,
				in long long end,
				in string location,
				in string subject);

		/* destroy the obkect in the poa */
		void destroy();
	};

/* Interface Invitation */
	interface Invitation {

		long getIndex();
		User getFromUser();
		seqUser getToUser();
		Date getInvitationDate();
		short getStatus();

		void setIndex(in long index);
		void setFromUser(in User fromUser);
		void setToUser(in seqUser toUser);
		void setInvitationDate(in Date newdate);
		void setStatus(in short newStatus);

		void setInvitation(in seqUser toUser, in Date invitationDate);

		void delete();
		boolean persist();

		void destroy();
	};
				};
			};
		};
	};
};

