<!-- DiSiCal Main Build Script -->
<!-- Currently maintained by stepn -->
<!-- $Id: build.xml,v 1.9 2002/01/06 13:15:58 deafman Exp $ -->
<project name="DiSiCal" default="all" basedir="./">




<!-- *** 'init' *********************************************************** -->
<!-- All other targets must depend on this one ! -->
<target name="init">

  <property name="disical.version" value="0.0.0pre_bigbang" />

  <!-- Setting Project properties: Default directories -->

  <!-- Normally these variables should never change, but it's good -->
  <!-- common Makefile practice to have variables for one's -->
  <!-- directories - just in case things change. -->
  <property name="dir.src" value="src" />
  <property name="dir.lib" value="lib" />
  <property name="dir.bin" value="bin" />
  <property name="dir.out" value="classes" />
  <property name="dir.dist" value="dist" />
  <property name="dir.etc" value="etc" />
  <property name="dir.ns" value="de/cwrose/disical"/>

  <!-- Runtime .properties-file locations, adjust via                -->
  <!-- java -D disical.cfg=/your/vanilla/foo/bar/cfg                 --> 

  <!-- This variable is used by all run_XXX targets to specify the   -->
  <!-- location of config files to be used (e.g. db configuration)   -->
  <!-- It defaults to ${dir.etc}/cfg.                                -->
  <!-- To understand how this scheme works in practice, see static   -->
  <!-- class util.CfgReader                                          -->
  <property name="disical.cfg" value="${dir.etc}/cfg" />

  <!-- Setting Project properties: build process flags -->
  <property name="build.debug" value="on" />
  <property name="build.optimize" value="off" />

  
  <!-- Setting Project properties: Classpath components -->
  <property name="mod.castor" value="castor-0.9.3.9.jar" />
  <property name="mod.castor.xml" value="castor-0.9.3.9-xml.jar" />
  <property name="mod.jdbc" value="jdbc-se2.0.jar" />
  <property name="mod.pgsql" value="postgresql.jar" />
  <property name="mod.transaction" value="jta1.0.1.jar" />
  <property name="mod.bsh" value="bsh-1.2b3.jar" />
  <property name="mod.OB" value="OB.jar" />


  <!-- Setting Project properties: Read User's *Local* properties -->

  <!-- This allows the customization of the build process without -->
  <!-- having to change build.xml (and thus committing changes to -->
  <!-- CVS).  Set any build.xml-Properties you like in your       -->
  <!-- ${dir.etc}/local-build.properties or even create your own  -->
  <!-- ones.  Non-ant-users: This is your #ifdef.                 -->
  <touch file="${dir.etc}/local-build.properties" />
  <property file="${dir.etc}/local-build.properties" />


  <!-- Initial build activities: Tstamp + Create pk output dirs -->
  <tstamp />
  <mkdir dir="${dir.out}/${dir.ns}/db" />
  <mkdir dir="${dir.out}/${dir.ns}/corba" />
  <mkdir dir="${dir.out}/${dir.ns}/ui" />
</target>



<!-- *** 'util' *********************************************************** -->
<!-- Build util related java sources -->

<target name="util" depends="init,clean_jar">
  <javac srcdir="${dir.src}" destdir="${dir.out}" 
         debug="${build.debug}" optimize="${build.optimize}">
    <include name="${dir.ns}/util/**/*.java" />
  </javac>
</target>

<target name="clean_util">
  <delete dir="${dir.out}/${dir.ns}/util" />
</target>




<!-- *** 'db' ************************************************************* -->
<!-- Build db related java sources -->
<target name="db" depends="init,util,clean_jar">
  <javac srcdir="${dir.src}" destdir="${dir.out}" 
         debug="${build.debug}" optimize="${build.optimize}">
	<classpath>
	  <pathelement path="${java.class.path}" />
	  <path id="db.classpath"> <!-- name classpath for later reference -->
	    <pathelement location="${dir.lib}/${mod.transaction}" />
	    <pathelement location="${dir.lib}/${mod.jdbc}" />
	    <pathelement location="${dir.lib}/${mod.pgsql}" />
	    <pathelement location="${dir.lib}/${mod.castor}" />
	    <pathelement location="${dir.lib}/${mod.castor.xml}" />
	  </path>
	</classpath>
    <include name="${dir.ns}/db/**/*.java" />
  </javac>
</target>

<target name="clean_db" depends="init,clean_util">
  <delete dir="${dir.out}/${dir.ns}/db" />
</target>




<!-- *** 'CORBA' ********************************************************** -->

<!-- Make the basic CORBA-Stuff -->
<target name="idl" depends="init,clean_jar">
  <exec dir="${dir.src}/${dir.ns}/corba" executable="jidl">
      <arg line="disical.idl" />
  </exec>
</target>

<target name="clean_idl">
  <delete dir="${dir.src}/${dir.ns}/corba/disiorb" />
</target>



<!-- Make CORBA related Java-Stuff -->
<target name="corba" depends="init,clean_jar,idl">
  <javac srcdir="${dir.src}" destdir="${dir.out}/${dir.ns}/corba"
         debug="${build.debug}" optimize="${build.optimize}">
        <classpath id="corba.classpath">
          <pathelement path="${java.class.path}" />
          <pathelement location="${dir.lib}/${mod.OB}" />
        </classpath>
     <include name="${dir.ns}/corba/**/*.java" />
  </javac>
</target>

<target name="clean_corba">
  <delete dir="${dir.out}/${dir.ns}/corba" />
</target>




<!-- *** 'JAR' ************************************************************ -->

<!-- The jar file is build in ${dir.lib} not in ${dir.dist}, as one   -->
<!-- might expect.                                                    -->
<!-- ${dir.dist} is reserved for packaging .tar.gz/.zip-files for the -->
<!-- binary distribution (currently unfinished ant-task 'dist').      -->

<!-- Make jar containing all necessary class files -->
<target name="jar" depends="init,corba,db">
  <jar 
    jarfile="${dir.lib}/disical-${disical.version}.jar"
    basedir="${dir.out}" 
  />
</target>

<target name="clean_jar" depends="init">
  <delete file="${dir.lib}/disical-${disical.version}.jar" />
</target>




<!-- *** MAIN TARGETS ***************************************************** -->
<!-- Build all -->
<target name="all" depends="init,jar"/>

<!-- Clean all -->
<target name="clean" 
        depends="init,clean_idl,clean_corba,clean_db,clean_util" />



<!-- *** Sample Programs *************************************************  -->

<target name="listprops" depends="init,jar">
  <java classname="de.cwrose.disical.util.CfgTester" fork="yes">
  <classpath>
    <pathelement path="${java.class.path}" />
	 <pathelement location="${dir.lib}/disical-${disical.version}.jar" />
  </classpath>
  <arg value="server" />
  <arg value="client" />
  <sysproperty key="disical.cfg" value="${disical.cfg}" />
  </java>
</target>




<!-- *** bsh Class Browser ************************************************ -->

<target name="bsh" depends="init,jar">
  <java classname="bsh.Console" fork="yes">
  <classpath>
    <pathelement path="${java.class.path}" />
    <pathelement location="${dir.lib}/${mod.bsh}" />
    <path refid="db.classpath" />
    <path refid="corba.classpath" />
    <pathelement location="${dir.lib}/disical-${disical.version}.jar" />
  </classpath>
  </java>
</target>




<!-- *** 'dist' ********************************************************** --> 
<!-- Make zip containing bindist of all necessary files -->

<target name="dist" depends="init,all">
  <zip zipfile="${dir.dist}/disical-${disical.version}.zip">
    <fileset dir="${disical.cfg}" file="./**" />
    <fileset dir="${dir.lib}" file="./**" />
    <fileset dir="${dir.bin}" file="./**" />
    <fileset dir="${dir.docs}" file="./**" />    
  </zip>
</target>

</project>
<!-- EOF -->


